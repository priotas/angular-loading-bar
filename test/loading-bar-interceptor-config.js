// Generated by CoffeeScript 2.4.0
(function() {
  describe('loadingBarInterceptor Service - config options', function() {
    it('should hide the spinner if configured', function() {
      module('chieffancypants.loadingBar', function(cfpLoadingBarProvider) {
        cfpLoadingBarProvider.includeSpinner = false;
      });
      return inject(function($timeout, cfpLoadingBar) {
        var spinner;
        cfpLoadingBar.start();
        spinner = document.getElementById('loading-bar-spinner');
        expect(spinner).toBeNull;
        cfpLoadingBar.complete();
        return $timeout.flush();
      });
    });
    it('should show the spinner if configured', function() {
      module('chieffancypants.loadingBar', function(cfpLoadingBarProvider) {
        cfpLoadingBarProvider.includeSpinner = true;
      });
      return inject(function($timeout, cfpLoadingBar) {
        var spinner;
        cfpLoadingBar.start();
        spinner = document.getElementById('loading-bar-spinner');
        expect(spinner).not.toBeNull;
        cfpLoadingBar.complete();
        return $timeout.flush();
      });
    });
    it('should hide the loadingBar if configured', function() {
      module('chieffancypants.loadingBar', function(cfpLoadingBarProvider) {
        cfpLoadingBarProvider.includeBar = false;
      });
      return inject(function($timeout, cfpLoadingBar) {
        var spinner;
        cfpLoadingBar.start();
        spinner = document.getElementById('loading-bar-spinner');
        expect(spinner).toBeNull;
        cfpLoadingBar.complete();
        return $timeout.flush();
      });
    });
    it('should show the loadingBar if configured', function() {
      module('chieffancypants.loadingBar', function(cfpLoadingBarProvider) {
        cfpLoadingBarProvider.includeBar = true;
      });
      return inject(function($timeout, cfpLoadingBar) {
        var spinner;
        cfpLoadingBar.start();
        spinner = document.getElementById('loading-bar-spinner');
        expect(spinner).not.toBeNull;
        cfpLoadingBar.complete();
        return $timeout.flush();
      });
    });

    /** @TODO: Migrate to Jasmine 3
    it('should not auto increment loadingBar if configured', function(done) {
      module('chieffancypants.loadingBar', function(cfpLoadingBarProvider) {
        cfpLoadingBarProvider.autoIncrement = false;
      });
      return inject(function($timeout, cfpLoadingBar) {
        var flag;
        flag = false;
        cfpLoadingBar.start();
        cfpLoadingBar.set(.5);
        runs(function() {
          return setTimeout(function() {
            return flag = true;
          }, 500);
        });
        waitsFor(function() {
          return flag;
        }, "500ms timeout", 1000);
        return runs(function() {
          expect(cfpLoadingBar.status()).toBe(.5);
          cfpLoadingBar.complete();
          return $timeout.flush();
        });
      });
    });
     */

    it('should auto increment loadingBar if configured', function() {
      module('chieffancypants.loadingBar', function(cfpLoadingBarProvider) {
        cfpLoadingBarProvider.autoIncrement = true;
      });
      return inject(function($timeout, cfpLoadingBar) {
        cfpLoadingBar.start();
        $timeout.flush();
        cfpLoadingBar.set(.5);
        $timeout.flush();
        expect(cfpLoadingBar.status()).toBeGreaterThan(.5);
        cfpLoadingBar.complete();
        return $timeout.flush();
      });
    });
    it('should append the loadingbar as the first child of the parent container if empty', function() {
      var emptyEl;
      emptyEl = angular.element('<div id="empty"></div>');
      angular.element(document).find('body').eq(0).append(emptyEl);
      module('chieffancypants.loadingBar', function(cfpLoadingBarProvider) {
        cfpLoadingBarProvider.parentSelector = '#empty';
      });
      return inject(function($timeout, $document, cfpLoadingBar) {
        var children, parent;
        cfpLoadingBar.start();
        parent = $document[0].querySelector(cfpLoadingBar.parentSelector);
        children = parent.childNodes;
        expect(children.length).toBe(2);
        expect(children[0].id).toBe('loading-bar');
        expect(children[1].id).toBe('loading-bar-spinner');
        cfpLoadingBar.complete();
        return $timeout.flush();
      });
    });
    return it('should append the loading bar to the body if parentSelector is empty', function() {
      module('chieffancypants.loadingBar', function(cfpLoadingBarProvider) {
        cfpLoadingBarProvider.parentSelector = '#doesnotexist';
      });
      return inject(function($timeout, $document, cfpLoadingBar) {
        var bar, body, parent, spinner;
        parent = $document[0].querySelector(cfpLoadingBar.parentSelector);
        expect(parent).toBeFalsy;
        body = $document[0].querySelector('body');
        cfpLoadingBar.start();
        bar = angular.element(body.querySelector('#loading-bar'));
        spinner = angular.element(body.querySelector('#loading-bar-spinner'));
        expect(bar.length).toBe(1);
        expect(spinner.length).toBe(1);
        cfpLoadingBar.complete();
        return $timeout.flush();
      });
    });
  });

}).call(this);
